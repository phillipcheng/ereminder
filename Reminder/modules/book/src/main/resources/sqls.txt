cassandra:
create keyspace reminder with replication={'class':'SimpleStrategy','replication_factor':1};
select count(*), year(creat_datetime) as y, day_of_year(creat_datetime) as d, hour(creat_datetime) as h, storeid from price group by y, d, h, storeid order by y desc, d desc, h desc, storeid desc limit 20;

#crbook db
truncate table boards;
truncate table books;
truncate table volumes;

select * from volumes where pcat='999999'

CREATE TABLE boards (id TEXT, pagenum INTEGER, data TEXT, utime TIMESTAMP, primary key(id(100), pagenum));
CREATE TABLE books (id TEXT, name TEXT, type integer, totalpage INTEGER, lastpage INTEGER, utime TIMESTAMP, data MEDIUMTEXT, cat TEXT, indexpage integer, author TEXT, status integer, primary key(id(100)));
CREATE TABLE volumes (id TEXT, name TEXT, type integer, utime TIMESTAMP, data TEXT, pcat TEXT, author TEXT, booknum INTEGER, primary key(id(100)));
CREATE TABLE sessions (id TEXT, device TEXT, userid TEXT, stime TIMESTAMP, etime TIMESTAMP, primary key(id(100)));
create table users (userid text, pass text, utime TIMESTAMP, primary key(userid(100)));
create table myreadings (userid text, rid text, primary key(userid(100), rid(100)));

create index book_name_idx on books (name(100));
create index book_cat_idx on books (cat(100));
create index book_author_idx on books (author(100));
create index book_status_idx on books (status);
create index book_utime_idx on books (utime);
create index book_type_idx on books (type);

create index vol_name_idx on volumes (name(100));
create index vol_pcat_idx on volumes (pcat(100));
create index vol_author_idx on volumes (author(100));
create index vol_type_idx on volumes (type);
			

select count(*), substring_index(id, '.', 1), mid(utime, 6,2) as month, mid(utime,9,2) as day, mid(utime, 12,2) as hour
from books group by substring_index(id, '.', 1), hour, day, month order by month desc, day desc, hour desc limit 10;

select count(*), substring_index(id, '.', 1), mid(utime, 6,2) as month, mid(utime,9,2) as day, mid(utime, 12,2) as hour
from volumes group by substring_index(id, '.', 1), hour, day, month order by month desc, day desc, hour desc limit 10;

select count(*), substring_index(id, '.', 1) from books group by substring_index(id, '.', 1);
select count(*), substring_index(id, '.', 1) from volumes group by substring_index(id, '.', 1);
select count(*), substring_index(id, '.', 1) from boards group by substring_index(id, '.', 1);

delete from books where id like 'xiaorenshu123%';
delete from volumes where id like '52xrs%';
delete from boards where id like '52xrs%'
select from volumes where id like 'a8z8%'


#crawl db
alter table product alter column data varchar(80000);
alter table product alter column title varchar(800)
alter table logs alter column throwable varchar(30000);

#delete product and price after a certain time, to sync with server side, when server is down, messages are lost
delete from product where updatetime > parsedatetime('2014 06 05 14 16 00','yyyy MM dd hh mm ss', 'en', 'GMT+0');
delete from price where createtime > parsedatetime('2014 06 05 14 16 00','yyyy MM dd hh mm ss', 'en', 'GMT+0');

truncate table task;
truncate table taskstat;
truncate table crawleditem;
truncate table price;
truncate table Logs;


delete from product where storeid='52xrs';
delete from price where storeid='52xrs';
delete from category where storeid='52xrs';


drop table task;
drop table taskstat;
drop table brokenpage;
drop table price;
drop table store;
drop table crawledItem;

select count(*), storeid from category group by storeid;
select count(*), storeid from product group by storeid;

select count(*), name from task group by name order by name;
select count(*), taskname from taskstat group by taskname order by taskname;
select count(*), day_of_year(createtime) as d, hour(createtime) as h, storeid from crawleditem where type='book' group by d, h, storeid order by d desc, h desc, storeid desc limit 10;
select count(*), day_of_year(createtime) as d, hour(createtime) as h, storeid from crawleditem where type='category' group by d, h, storeid order by d desc, h desc, storeid desc limit 10;
select count(*), day_of_year(lastupdatedate) as d, hour(lastupdatedate) as h, taskname from taskstat group by d, h, taskname order by d desc, h desc limit 10;
select * from crawleditem order by createtime desc limit 2;
select count(*), nodeid, storeid from task group by nodeid, storeid order by nodeid, storeid;
select count(*), nodeid, status, storeid from taskstat group by nodeid, status, storeid order by status, nodeid, storeid;

set lock_mode 3;
SET MULTI_THREADED 1;

select count(*), day_of_year(updatetime) as d, hour(updatetime) as h, minute(updatetime) as m, storeid from product group by d, h, m, storeid order by d desc, h desc, m desc, storeid desc limit 20;

##top sql for crawl db
select count(*), day_of_year(createtime) as d, hour(createtime) as h, storeid from price group by d, h, storeid order by d desc, h desc, storeid desc limit 10;
select count(*), day_of_year(updatetime) as d, hour(updatetime) as h, storeid from product group by d, h, storeid order by d desc, h desc, storeid desc limit 10;
select count(*), day_of_year(updatetime) as d, hour(updatetime) as h, minute(updatetime) as m, storeid from product group by d, h, m, storeid order by d desc, h desc, m desc, storeid desc limit 20;

select count(*) from product;
select count(*) from price;
select * from price order by createtime desc limit 10;

#top sql for task db
select count(*), storeid, leaf from cat group by storeid, leaf order by storeid, leaf;
SELECT count(*), name, nodeid FROM TASK group by name, nodeid order by name, nodeid;
select count(*), nodeid from taskstat group by nodeid order by nodeid;
select count(*), nodeid from taskstat where latest=true group by nodeid order by nodeid;

# summary
SELECT count(*), type, nodeid FROM TASK group by type, nodeid;
select count(*), year(creat_datetime) as y, day_of_year(creat_datetime) as d, storeid from price group by y, d, storeid order by y desc, d desc, storeid desc limit 20;
select count(*) from taskstat;

### category view
select count(*), storeid from cat where leaf = true group by storeid;
select count(*) from cat where storeid='az' and leaf=true and num > 16*75;
select * from cat where storeid='az' and leaf=true and num > 16*75 order by num desc;

select count(*) from cat where leaf = true and storeid='az';
select count(*) from cat where leaf = true and storeid='az' and instr(catid,'low')=0 and num>=1200;
select count(*) from cat where leaf = true and storeid='az' and instr(catid,'low')>0;

select * from cat where instr(catid, 'n:658390051,n:!658391051,n:658399051,n:2150814051,n:659696051&low-price=112.78&high-price=112.81')>0

## task view
select count(*), storeid from cat where leaf = true group by storeid;
SELECT count(*), storeid, nodeid FROM TASK group by storeid, nodeid order by nodeid;
select count(*), nodeid from taskstat group by nodeid order by nodeid;
select count(*) from task where storeid='az' and totalitem > 16*75;
select count(*) from task where storeid='dd' and topage=-1 and totalitem > 16*75;


select * from task where storeid='az' and instr(teid, 'low')>0 limit 10;
select * from task where storeid='dd' and frompage<>1 limit 10;


select count(*) from task where instr(teid, 'low')>0;

select * from task where instr(teid,'n:658390051,n:!658391051,n:658399051,n:658579051,n:659652051')>0


update task set nodeid='server1'


SELECT count(*) FROM TASK where storeid='az';
select distinct totalitem from task where storeid='az'
SELECT count(*) FROM TASK where storeid='dd';
select * from task where storeid='az' limit 20;
select * from task where storeid='dd' limit 20;

### stat view
select count(*), nodeid from taskstat group by nodeid order by nodeid;
select count(*) from taskstat;
select count(*), ttype, type from taskstat group by ttype, type;
select count(*) from taskstat where latest=true;
select count(*) c, t.ttype, t.storeid, b.num from taskstat b, task t where b.tid=t.teid and b.latest=true group by t.ttype, t.storeid, b.num order by c desc;
select * from taskstat b where b.bookbrs=0 and b.startdate<>b.lastupdatedate and left(b.tid,1)='2';
#select not finished category

select * from taskstat b, cat c where substring(b.tid, 4, length(b.tid)-4) = c.catid and c.num>b.bookbrs and b.bookbrs>0 
	and left(b.tid,3)='2dd' order by b.bookbrs desc limit 10;

select count(*) from taskstat b, cat c where substring(b.tid, 4, length(b.tid)-4) = c.catid and c.num>b.bookbrs and b.bookbrs>0 
	and left(b.tid,3)='2dd';


select * from taskstat b, cat c where substring(b.tid, 4, length(b.tid)-4) = c.catid and c.num>b.bookbrs and b.bookbrs>0 
	and left(b.tid,3)='2az' order by b.bookbrs asc limit 10;

select count(*) from taskstat b, cat c where substring(b.tid, 4, length(b.tid)-4) = c.catid and c.num>b.bookbrs and b.bookbrs>0 
	and left(b.tid,3)='2az';

select * from taskstat where num = 2


# find when the internet is broken
select count (*) from taskstat where bookbrs = 0;
select * from taskstat b, task t where b.tid = t.teid and t.ttype=2 order by b.startdate;
select count (b.id) from taskstat b, task t where b.tid = t.teid and t.ttype=2 and b.bookbrs=0;
delete from taskstat where startdate >parsedatetime('2013 02 26 00 06 25','yyyy MM dd hh mm ss', 'en', 'GMT+8') 

select * from taskstat order by startdate desc limit 20;
select tid from taskstat order by startdate asc; 
select tid from taskstat order by createdate asc;


select distinct key from taskstat where num>4 and ttype='BrowseDetail'
select count(*) from taskstat where num=1 and ttype='BrowseDetail' and latest=true;
select * from taskstat where num=1 and ttype='BrowseDetail' and latest=true order by startdate desc limit 10

#current executing tasks
select t.nodeid, b.num, t.key, b.startdate from taskstat b, task t where b.tid=t.teid and b.latest=true and b.startdate=b.lastupdatedate order by b.startdate

#broken page view
select * from brokenpage order by lastupdatetime desc limit 10;
select count (*), type, count from brokenpage group by type, count;
select * from brokenpage order by lastupdatetime asc
delete from brokenpage where lastupdatetime > parsedatetime('2013 02 26 00 09 00','yyyy MM dd hh mm ss', 'en', 'GMT+8') 


### book price view
select count(*), year(creat_datetime) as y, day_of_year(creat_datetime) as d, hour(creat_datetime) as h, storeid from price group by y, d, h, storeid order by y desc, d desc, h desc, storeid desc limit 20;
select count(*) from price;
select count(*) from book;
select * from price as p, book as b where p.itemid=b.isbn order by p.creat_datetime desc limit 10;

### specific item history view
select * from price where itemid='22742321' order by creat_datetime desc;
select * from book where isbn='22742321';


## promotion view
select distinct (RPID) from price;
select * from promotion order by findtime desc;
select count (*) from price p where p.PID='No Promotion.';
select count (*) from price p where p.RPID='UN_SPECIFIED';


## runtime view
select count(*), day_of_year(creat_datetime) as d, hour(creat_datetime) as h from price group by d, h order by d desc, h desc limit 10
select count(*), year(creat_datetime) as y, day_of_year(creat_datetime) as d, hour(creat_datetime) as h from price group by y, d, h order by y desc, d desc, h desc limit 20
select count(*), day_of_year(creat_datetime) as d from price group by d order by d desc limit 10



#### select the duplicated price-record in the db not caused by parrallel processing of the same category:
select p.itemid, 
		count(1) as num, 
		datediff('MINUTE', min(p.creat_datetime), max(p.creat_datetime)),
		datediff('SECOND', min(p.creat_datetime), max(p.creat_datetime)),		
		datediff('MILLISECOND', min(p.creat_datetime), max(p.creat_datetime))
  from price p, book b 
	where p.creat_datetime > parsedatetime('2012 12 13','yyyy MM dd', 'en', 'GMT+8') 
	and p.itemid=b.isbn 
	and b.catlist not like '%:%' 
	group by p.itemid 
		having min(p.price)=max(p.price) 
			and count(1) >1 
			and max(p.rpid)=min(p.rpid) 
order by num desc

#### select the duplicated price-record in the db since 2012/12/16:
select p.itemid, 
		count(1) as num, 
		datediff('MINUTE', min(p.creat_datetime), max(p.creat_datetime)),
		datediff('SECOND', min(p.creat_datetime), max(p.creat_datetime)),		
		datediff('MILLISECOND', min(p.creat_datetime), max(p.creat_datetime))
  from price p
	where p.creat_datetime > parsedatetime('2012 12 16','yyyy MM dd', 'en', 'GMT+8')
	group by p.itemid 
		having min(p.price)=max(p.price) 
			and count(1) >1 
			and max(p.rpid)=min(p.rpid) 
order by num desc 

### data patch for bug "cat&":
select count(1) from book where catlist like '%&%';
select * from book where catlist like '%&%' order by creat_datetime desc limit 1;
update book set catlist = substring(catlist, 0, 17) where isbn='20257270';
select * from book where isbn='20257270';
update book set catlist = substring(catlist, 0, 17) where catlist like '%&%'

select p.itemid, count(*) as c from price p group by p.itemid order by c desc limit 10

### drop task table
drop table task
drop table cat
### drop price PID column
alter table price drop column PID;
alter table price add storeid VARCHAR(50);
update price set storeid='dd';
alter table book add storeid VARCHAR(50);
update book set storeid='dd';
alter table promotion add storeid VARCHAR(50);
update promotion set storeid='dd';



update task set nodeid='server1'

#these are not needed for client db
drop table promotion;
drop table price;
drop table book;

#index
create index IDX_BS_LATEST on taskstat (latest); 
create index IDX_BS_TTYPE on taskstat (ttype);
create index IDX_BS_TYPE on taskstat (type);
create index IDX_BS_KEY on taskstat (key);

create index IDX_TASK_NODEID on TASK(NODEID);

create index IDX_CATEGORY_ROOTTASKID on CATEGORY(ROOTTASKID);
create index IDX_PRODUCT_ROOTTASKID on PRODUCT(ROOTTASKID);
create index IDX_LOGS_TASKID on LOGS(TASKID);

#increase the size of title and broken-url
alter table book alter column title varchar(400);
alter table brokenpage alter column url varchar(350);

#why so many bookbrs = 0, done
SELECT * FROM taskstat b, task t where b.tid=t.teid and b.bookbrs = 0 limit 20
	#why task total item is 0
	SELECT * from task t where t.totalitem=0
	#copied from cat.itemnum
	select * from cat where num=0
#find finished tasks with bookbrs=0 and normal tasks
select * from taskstat b where b.bookbrs=0 and b.startdate<>b.lastupdatedate;
select b.bookbrs from taskstat b where b.startdate<>b.lastupdatedate

alter table task alter column ttype varchar(255);
