<?xml version="1.0" encoding="UTF-8"?>
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<!-- 编辑使用 XMLSpy v2006 U (http://www.altova.com) 由 any (any) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="Tasks" type="TasksType"/>
	<xs:simpleType name="VarType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="string"/>
			<xs:enumeration value="int"/>
			<xs:enumeration value="float"/>
			<xs:enumeration value="xpath"/>
			<xs:enumeration value="date"/>
			<xs:enumeration value="page"/>
			<xs:enumeration value="list"/>
			<xs:enumeration value="pagelist"/>
			<xs:enumeration value="regexp"/>
			<xs:enumeration value="expression"/>
			<xs:enumeration value="externalList"/>
			<xs:enumeration value="boolean"/>
			<xs:enumeration value="file"/>
			<xs:enumeration value="htmlElement"/>
			<xs:enumeration value="url"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="OpType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="!="/>
			<xs:enumeration value="="/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ScopeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="const"/>
			<xs:enumeration value="param"/>
			<xs:enumeration value="attribute"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="DirectionType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="BOTH"/>
			<xs:enumeration value="IN"/>
			<xs:enumeration value="OUT"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="BDTProcessType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="inline"/>
			<xs:enumeration value="genbpt"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ParamType">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="type" type="VarType" use="optional" default="string"/>
		<xs:attribute name="value" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>design time the default value, runtime will be assigned by taskInvoker</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ParamValueType">
		<xs:attribute name="paramName" type="xs:string"/>
		<xs:attribute name="value" type="xs:string"/>
		<xs:attribute name="type" type="VarType" use="optional" default="string"/>
		<xs:attribute name="scope" type="ScopeType"/>
	</xs:complexType>
	<xs:complexType name="ValueType">
		<xs:sequence>
			<xs:element name="strPreprocess" minOccurs="0">
				<xs:complexType>
					<xs:attribute name="trimPre" type="xs:string"/>
					<xs:attribute name="trimPost" type="xs:string"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="sampleUrl" type="xs:string" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>multiple sample provided for toType is Page or Pagelist</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="pageVerify" type="BinaryBoolOp" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>string to verify if page or pagelist type, for pagelist, this is also a list, 1-1 mapping.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="fromScope" type="ScopeType"/>
		<xs:attribute name="fromType" type="VarType" use="optional">
			<xs:annotation>
				<xs:documentation>the value's input type, default to xpath</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" type="xs:string" use="required"/>
		<xs:attribute name="toType" type="VarType" use="optional">
			<xs:annotation>
				<xs:documentation>the type of the interpret result</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="toEntryType" type="VarType" use="optional" default="string">
			<xs:annotation>
				<xs:documentation>the type of the entry in the list if toType is list type</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="toDirectory">
			<xs:annotation>
				<xs:documentation>only for toEntryType is File, expression</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="basePage" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>based on which page, to eval this xpath</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="enableJS" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>used with toType=page, if null, reusing previous wc setting</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="format" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>used with toType=date</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="BrowseTaskType">
		<xs:sequence>
			<xs:element name="sampleUrl" type="xs:string" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>multiple sample url for start url</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="param" type="ParamType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="userAttribute" type="AttributeType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="idUrlMapping" type="RegExpType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>for bdt: 1. this is uni-directional, from url to id, 2. if not having this, id will be assigned in user attribute</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="idUrlMappingFirstPage" type="RegExpType" minOccurs="0"/>
			<xs:element name="itemName" type="ValueType" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="taskName" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>if not specified, then this task can't be invoked explicitly</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="isStart" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>true, started when engine starts, does not need an invoke</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="rerunInterim" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>if missing, means run only, else specify number of seconds before rerun</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="enableJS" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="startUrl" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>if isStart is true, then this is needed.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="skipJS" type="xs:string" use="optional"/>
		<xs:attribute name="cachePage" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>the dfs file name to save the cache</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="BrowseCatType">
		<xs:sequence>
			<xs:element name="baseBrowseTask" type="BrowseTaskType"/>
			<xs:element name="subItemList" type="SubListType"/>
			<xs:element name="totalPageNum" type="ValueType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>means how many pages of childitems we have, each page will be split in one task. 
if not set, but itemPerPage and totalItemNum set, this can be calculated.
if also not set, then 1 task browsing all items will be generated.
</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="itemPerPage" type="ValueType" minOccurs="0"/>
			<xs:element name="totalItemNum" type="ValueType" minOccurs="0"/>
			<xs:element name="maxPageNum" type="ValueType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>max pages allowed for this category, most web-sites has a limitation, if totalPageNum calculated is larger than this, then some items will be missing</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="isLeaf" type="xs:boolean" use="required"/>
		<xs:attribute name="pagesPerBDT" type="xs:int" use="optional" default="0">
			<xs:annotation>
				<xs:documentation>split into how many pages per bdt, less or equal to 0 means into one browse-all bdt</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="BrowseDetailType">
		<xs:sequence>
			<xs:element name="baseBrowseTask" type="BrowseTaskType"/>
			<xs:element name="firstPageClickStream" type="ClickStreamType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>the click stream to the 1st page of the book</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="totalPage" type="ValueType" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="nextPage" type="xs:string"/>
		<xs:attribute name="lastPageCondition" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>boolean expression</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="monitorPrice" type="xs:boolean" use="optional" default="false"/>
		<xs:attribute name="processType" type="BDTProcessType" use="optional" default="inline">
			<xs:annotation>
				<xs:documentation>inline: browse all products in the bdt within this task
genbpt: generate browse-product-tasks for this bdt, and each bpt is processed in parrallel</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="SubListType">
		<xs:sequence>
			<xs:element name="itemList" type="ValueType">
				<xs:annotation>
					<xs:documentation>xpath to list of item, usually of type html element , but can be page or further click stream (TBD), then itemFullUrl is the abs xpath on the last page</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="userAttribute" type="AttributeType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="taskInvokes" type="TaskInvokeType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>if not using item full url, then invoking prd Task by passing this param mapping</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="lastPageCondition" type="BinaryBoolOp" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if not specified, then last page is true when:
1. lastPage xpath does not exist.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="lastScreenCondition" type="BinaryBoolOp" minOccurs="0"/>
			<xs:element name="name" type="ValueType" minOccurs="0"/>
			<xs:element name="itemFullUrl" type="ValueType" minOccurs="0"/>
			<xs:element name="itemFullUrlClicks" type="ClickStreamType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>clicks needed before apply itemFullUrl</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="nextPage" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>turn horizontally</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="isLeaf" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="lastItem" type="xs:string" use="optional"/>
		<xs:attribute name="nextScreen" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>turn vertically</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="AttributeType">
		<xs:sequence>
			<xs:element name="value" type="ValueType" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="nameType" type="VarType" use="optional">
			<xs:annotation>
				<xs:documentation>for input/set, the nameType defaults to XPATH, for get the nameType defaults to string</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="optional" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>if true, its existance will not be used in the page retrieval verification</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="RegExpType">
		<xs:sequence>
			<xs:element name="Token" type="TokenType" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="BinaryBoolOp">
		<xs:sequence>
			<xs:element name="lhs" type="ValueType"/>
			<xs:element name="rhs" type="ValueType"/>
		</xs:sequence>
		<xs:attribute name="operator" type="OpType" use="required"/>
	</xs:complexType>
	<xs:complexType name="TokenType">
		<xs:annotation>
			<xs:documentation>for Id-Url mapping</xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="value" type="xs:string" use="required"/>
		<xs:attribute name="type" type="VarType" use="optional">
			<xs:annotation>
				<xs:documentation>this is fromType</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="toType" type="VarType" use="optional" default="string"/>
		<xs:attribute name="dir" type="DirectionType" use="optional" default="BOTH">
			<xs:annotation>
				<xs:documentation>default both, IN means to url, OUT means from url</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ClickStreamType">
		<xs:annotation>
			<xs:documentation>For each click/link, first do some input assignment, then click the xpath typed nextpage and return a page.		</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="link" type="ClickType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>usually toType of nextpage is page, and name will be used in later expression</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="finishCondition" type="BinaryBoolOp" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if specified, the last link will be clicked till finish condition, if true click finished</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="TasksType">
		<xs:sequence>
			<xs:element name="loginInfo" type="LoginType" minOccurs="0"/>
			<xs:element name="skipUrl" minOccurs="0" maxOccurs="unbounded">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:maxLength value="100"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="CatTask" type="BrowseCatType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="PrdTask" type="BrowseDetailType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="invokeTask" type="TaskInvokeType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="storeId" type="xs:string" use="required"/>
		<xs:attribute name="rootVolume" type="xs:string" use="required"/>
		<xs:attribute name="maxThread" type="xs:int" use="optional" default="0">
			<xs:annotation>
				<xs:documentation>max # threads can be used to crawl this site, default 0 for unlimited</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="productType" use="optional" default="book">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="book"/>
					<xs:enumeration value="default"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="TaskInvokeType">
		<xs:sequence>
			<xs:element name="param" type="ParamValueType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="myTaskName"/>
		<xs:attribute name="toCallTaskName" type="xs:string">
			<xs:annotation>
				<xs:documentation>if not specified, default to the first product task</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ClickType">
		<xs:sequence>
			<xs:element name="input" type="AttributeType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>parameters to input</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="print" type="AttributeType" minOccurs="0" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>for debug purpose, print the value from the page</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="nextpage" type="ConditionalNextPage"/>
		</xs:sequence>
		<xs:attribute name="pageName" type="xs:string">
			<xs:annotation>
				<xs:documentation>if only 1 click in the click stream, the pageName is optional.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="RedirectType">
		<xs:annotation>
			<xs:documentation>redirect to the specified clickstream depends on the landing condition/page</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="landing" type="ValueType"/>
		</xs:sequence>
		<xs:attribute name="clickstream" type="xs:string"/>
	</xs:complexType>
	<xs:complexType name="LoginType">
		<xs:sequence>
			<xs:element name="loginClickStream" type="ClickStreamType" maxOccurs="unbounded"/>
			<xs:element name="redirectedURL" type="RedirectType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>a list of possible redirected url, if redirected here, we login</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="gotchaURL" type="ValueType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>we are caught, need manual ?</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="credential" type="CredentialType" maxOccurs="unbounded"/>
			<xs:element name="loginSuccessCondition" type="BinaryBoolOp" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if not specified, as long as the landing page differs, success</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="loginGotchaCondition" type="BinaryBoolOp" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if loginSuccessCondition failed, try this one to see whether it is gotcha</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CredentialType">
		<xs:attribute name="username" type="xs:string"/>
		<xs:attribute name="password" type="xs:string"/>
	</xs:complexType>
	<xs:complexType name="ConditionalNextPage">
		<xs:annotation>
			<xs:documentation>find the next page according to result of condition. eval the value part, if not defined means the current page, if defined (xpath), follow it, then lookup the click whose pagename equals to the nextpage's name, if found, click control goes there, if not, finished.
</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="condition" type="BinaryBoolOp" minOccurs="0"/>
			<xs:element name="failNextPage" type="AttributeType" minOccurs="0"/>
			<xs:element name="successNextPage" type="AttributeType"/>
		</xs:sequence>
		<xs:attribute name="waitTime" type="xs:int"/>
	</xs:complexType>
</xs:schema>
