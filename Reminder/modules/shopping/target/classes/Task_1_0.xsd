<?xml version="1.0" encoding="UTF-8"?>
<!-- 被2012 () 使用XMLSpy v编辑的 (http://www.altova.com) by -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="Tasks">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="Task" type="TaskType" maxOccurs="unbounded"/>
				<xs:element name="skipUrl" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="storeId" type="xs:string" use="required"/>
			<xs:attribute name="rootVolume" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="TaskType">
		<xs:attribute name="taskName" type="xs:string" use="required"/>
		<xs:attribute name="itemType" type="xs:string" use="required"/>
		<xs:attribute name="isStart" type="xs:boolean" use="optional"/>
		<xs:attribute name="rerunInterim" type="xs:int" use="optional">
			<xs:annotation>
				<xs:documentation>if missing, means run only, else specify number of seconds before rerun</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="BrowseItemTaskType">
		<xs:complexContent>
			<xs:extension base="TaskType">
				<xs:sequence>
					<xs:element name="userAttribute" type="NameValueType" minOccurs="0" maxOccurs="unbounded"/>
					<xs:element name="idUrlMapping" type="RegExpType">
						<xs:annotation>
							<xs:documentation>for bdt, this is uni-directional, from url to id</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="idUrlMappingFirstPage" type="RegExpType" minOccurs="0"/>
					<xs:element name="itemName" type="ValueType" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="enableJS" type="xs:boolean" use="required"/>
				<xs:attribute name="startUrl" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>if isStart is true, then this is needed.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="highMem" type="xs:boolean" use="optional" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="browse_cat">
		<xs:complexContent>
			<xs:extension base="BrowseItemTaskType">
				<xs:sequence>
					<xs:element name="subItemList" type="SubListType"/>
					<xs:element name="totalPageNum" type="ValueType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>means how many pages of childitems we have, each page will be split in one task. 
if not set, but itemPerPage and totalItemNum set, this can be calculated.
if also not set, then 1 task browsing all items will be generated.
</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="itemPerPage" type="ValueType" minOccurs="0"/>
					<xs:element name="totalItemNum" type="ValueType" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="isLeaf" type="xs:boolean" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="browse_detail">
		<xs:complexContent>
			<xs:extension base="BrowseItemTaskType">
				<xs:sequence>
					<xs:element name="lastPageCondition" type="BinaryBoolOp" minOccurs="0">
						<xs:annotation>
							<xs:documentation>if true reach the end of the book</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="firstPageClickStream" type="ClickStreamType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>the click stream to the 1st page of the book</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="totalPage" type="ValueType" minOccurs="0"/>
					<xs:element name="directPages" type="ValueType" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="imagePath" type="xs:string" use="optional"/>
				<xs:attribute name="nextPage" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SubListType">
		<xs:sequence>
			<xs:element name="userAttribute" type="NameValueType" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="lastPageCondition" type="BinaryBoolOp" minOccurs="0"/>
			<xs:element name="name" type="ValueType" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="itemList" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>xpath to list of item, usually of type html anchor</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="itemFullUrl" type="xs:string" use="optional"/>
		<xs:attribute name="nextPage" type="xs:string" use="optional"/>
		<xs:attribute name="isLeaf" type="xs:boolean" use="optional" default="true"/>
		<xs:attribute name="lastItem" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:complexType name="NameValueType">
		<xs:sequence>
			<xs:element name="value" type="ValueType"/>
		</xs:sequence>
		<xs:attribute name="name" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="RegExpType">
		<xs:sequence>
			<xs:element name="Token" type="TokenType" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="BinaryBoolOp">
		<xs:attribute name="lhs" type="xs:string"/>
		<xs:attribute name="rhs" type="xs:string"/>
		<xs:attribute name="operator">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="="/>
					<xs:enumeration value="!="/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="TokenType">
		<xs:annotation>
			<xs:documentation>used for Id-Url mapping</xs:documentation>
		</xs:annotation>
		<xs:attribute name="name" type="xs:string"/>
		<xs:attribute name="value" type="xs:string"/>
		<xs:attribute name="regExp" type="xs:boolean" default="false">
			<xs:annotation>
				<xs:documentation>optional, if missing means false, if true means the value is regExp, does not need to quote. if false or not set, it will be quoted</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ValueType">
		<xs:sequence>
			<xs:element name="strPreprocess" minOccurs="0">
				<xs:complexType>
					<xs:attribute name="trimPre" type="xs:string"/>
					<xs:attribute name="trimPost" type="xs:string"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="fromType" use="optional">
			<xs:annotation>
				<xs:documentation>the value's input type, default to xpath</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="string"/>
					<xs:enumeration value="xpath"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="value" type="xs:string" use="required"/>
		<xs:attribute name="toType" use="optional">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="string"/>
					<xs:enumeration value="date"/>
					<xs:enumeration value="int"/>
					<xs:enumeration value="page"/>
					<xs:enumeration value="list"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="basePage" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>based on which page, to eval this xpath</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="enableJS" type="xs:boolean">
			<xs:annotation>
				<xs:documentation>used with toType=page, if null, reusing previous wc setting</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="format" type="xs:string" use="optional">
			<xs:annotation>
				<xs:documentation>used with toType=date</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="ClickStreamType">
		<xs:annotation>
			<xs:documentation>each link is an xpath expression, will evaluaged to a href, it will be clicked and  return a page.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="link" type="NameValueType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>usually Value Type is page, and name will be used in later expression</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="finishCondition" type="BinaryBoolOp" minOccurs="0">
				<xs:annotation>
					<xs:documentation>if specified, the last link will be clicked till finish condition, if true reach the first page of the book</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
